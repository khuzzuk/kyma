#!/usr/bin/env node
"use strict";

const Tilda = require("tilda")
    , CliGhCal = require("..")
    , Typpy = require("typpy")
    , Logger = require("bug-killer")
    , Moment = require("moment")
    ;

new Tilda(`${__dirname}/../package.json`, {
    options: [
        {
            opts: ["d", "data"]
          , desc: "Provide the JSON data in this format: [[\"03/14/2015\", 5]]"
          , name: "data"
          , default: []
        }
      , {
            opts: ["t", "theme"]
          , desc: "The theme to use."
          , name: "theme"
          , default: "DARK"
        }
      , {
            opts: ["s", "start"]
          , desc: "The start date."
          , name: "date"
          , default:  new Moment().subtract(1, "years")
        }
      , {
            opts: ["e", "end"]
          , desc: "The end date."
          , name: "date"
          , default: new Moment()
        }
      , {
            opts: ["n", "no-ansi"]
          , desc: "Forces the tool not to use ANSI styles."
        }
      , {
            opts: ["l", "light"]
          , desc: "Enables the light theme."
        }
      , {
            opts: ["raw"]
          , desc: "Get raw data."
        }
    ]
  , examples: [
        "cli-gh-cal -d '[[\"03/14/2015\", 5]]' -t none"
      , "cli-gh-cal -d '[[\"03/14/2015\", 5]]' -s '1 January 2014'"
    ]
}).main(action => {
    let dataOpt = action.options.data
      , startOpt = action.options.start
      , endOpt = action.options.end
      , noAnsiOpt = action.options.noAnsi
      , themeOpt = action.options.theme
      ;

    if (Typpy(dataOpt.value) === "string") {
        try {
            dataOpt.value = JSON.parse(dataOpt.value);
        } catch (e) {
            return Logger.log("Cannot parse the input data. Make sure you pass valid JSON.", "error");
        }
    }

    let options = {
        start: startOpt.is_provided ? Moment(startOpt.value) : Moment().subtract(1, "years")
      , end: endOpt.is_provided ? Moment(endOpt.value) : Moment()
      , theme: noAnsiOpt.is_provided ? null : /LIGHT|DARK/.test(themeOpt.value) ? themeOpt.value : null
      , raw: action.options.raw.is_provided
    };

    // Validate the dates
    if (!options.start || !options.start.isValid()) {
        options.start = Moment().subtract(1, "years");
        Logger.log("Invalid start date. Using default instead (" + options.start.format("LL") + ").", "warn");
    }

    if (!options.end || !options.end.isValid()) {
        options.end = Moment();
        Logger.log("Invalid end date. Using default instead (" + options.end.format("LL") + ").", "warn");
    }


    console.log(CliGhCal(dataOpt.value, options));
});
